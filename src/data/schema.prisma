generator client {
  provider      = "prisma-client-js"
  output        = "./generated/prisma-client"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_DIRECT_URL")
}

model Participants {
  id              Int     @id @default(autoincrement())
  guildId         String  @map("guild_id")
  userId          String  @map("user_id")
  userDisplayName String  @map("user_display_name")
  isActive        Boolean @default(true) @map("is_active")

  hostGames   Games[] @relation("host_participant")
  winnerGames Games[] @relation("winner_participant")

  @@map("participants")
}

model Games {
  id                  Int      @id @default(autoincrement())
  guildId             String   @map("guild_id")
  seasonId            Int      @map("season_id")
  hostParticipantId   Int?     @map("host_participant_id")
  winnerParticipantId Int      @map("winner_participant_id")
  timestamp           DateTime @default(now())

  season            Seasons       @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  hostParticipant   Participants? @relation("host_participant", fields: [hostParticipantId], references: [id], onDelete: Cascade)
  winnerParticipant Participants  @relation("winner_participant", fields: [winnerParticipantId], references: [id], onDelete: Cascade)

  @@map("games")
}

model Seasons {
  id        Int      @id @default(autoincrement())
  guildId   String   @map("guild_id")
  index     Int      @default(0)
  timestamp DateTime @default(now())
  isActive  Boolean  @default(true) @map("is_active")

  Games Games[]

  @@map("seasons")
}

model SeasonEndVotes {
  id        Int      @id @default(autoincrement())
  guildId   String   @map("guild_id")
  userId    String   @map("user_id")
  timestamp DateTime @default(now())

  @@map("season_end_votes")
}
